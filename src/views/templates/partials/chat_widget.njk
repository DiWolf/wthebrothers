{#
  Nunjucks partial para incrustar un widget de chat que envía mensajes a un webhook de n8n.
  Uso básico:

  {% from "partials/chat_widget.njk" import ChatWidget %}
  {{ ChatWidget({
      webhookUrl: "https://dev.aurorati.mx/webhook/b8213de5-c1b2-4ef3-95ef-52d0376ca61b/chat",
      title: "Asesor The Brothers Logistic",
      subtitle: "En línea",
      authHeader: "",       # opcional, ej. "x-api-key:MI_TOKEN"
      openByDefault: false   # opcional
  }) }}

  Requisitos: ninguno. Todo viene inline. Si deseas separar CSS/JS, busca las marcas
  <!-- CHAT:STYLE --> y <!-- CHAT:SCRIPT --> y muévelas a tus bundles.
#}

{% macro ChatWidget(cfg) %}
  {% set _id = cfg.id or 'cb-widget' %}
  {% set _webhook = cfg.webhookUrl %}
  {% set _title = cfg.title or 'Asesor The Brothers Logistic' %}
  {% set _subtitle = cfg.subtitle or 'En línea' %}
  {% set _authHeader = cfg.authHeader or '' %}
  {% set _open = cfg.openByDefault or false %}

  <!-- CHAT:STYLE -->
  <style>
    :root { --chat-bg:#111827; --chat-fg:#e5e7eb; --brand:#2563eb; --brand-2:#1d4ed8; --shadow:0 10px 30px rgba(0,0,0,.35); }
    #{{ _id }} * { box-sizing:border-box; }
    #{{ _id }} .cb-fab{position:fixed;right:18px;bottom:18px;z-index:9999;width:56px;height:56px;border-radius:999px;background:var(--brand);color:#fff;display:grid;place-items:center;font-size:24px;cursor:pointer;box-shadow:var(--shadow);transition:transform .2s ease,background .2s ease}
    #{{ _id }} .cb-fab:hover{transform:translateY(-2px);background:var(--brand-2)}
    #{{ _id }} .cb-panel{position:fixed;right:18px;bottom:84px;width:360px;max-width:calc(100vw - 24px);height:520px;max-height:calc(100vh - 110px);background:var(--chat-bg);color:var(--chat-fg);border-radius:16px;box-shadow:var(--shadow);display:none;flex-direction:column;overflow:hidden;z-index:9999;border:1px solid #1f2937}
    #{{ _id }} .cb-panel.open{display:flex}
    #{{ _id }} .cb-header{padding:12px 14px;background:#0b1220;display:flex;align-items:center;gap:10px}
    #{{ _id }} .cb-dot{width:10px;height:10px;border-radius:999px;background:#22c55e;box-shadow:0 0 0 3px rgba(34,197,94,.15)}
    #{{ _id }} .cb-title{font-weight:600;font-size:14px}
    #{{ _id }} .cb-sub{font-size:12px;color:#9ca3af;margin-left:auto}
    #{{ _id }} .cb-body{flex:1;overflow-y:auto;padding:14px;display:flex;flex-direction:column;gap:8px}
    #{{ _id }} .cb-msg{padding:10px 12px;border-radius:12px;max-width:85%;font-size:14px;line-height:1.35;white-space:pre-wrap}
    #{{ _id }} .cb-msg.user{background:rgba(16,185,129,.15);border:1px solid rgba(16,185,129,.25);color:#d1fae5;margin-left:auto}
    #{{ _id }} .cb-msg.bot{background:#111827;border:1px solid #1f2937;color:#e5e7eb;margin-right:auto}
    #{{ _id }} .cb-input{padding:10px;background:#0f172a;border-top:1px solid #1f2937;display:flex;gap:8px;align-items:center}
    #{{ _id }} .cb-input input[type=text]{flex:1;background:#0b1220;border:1px solid #1f2937;color:var(--chat-fg);border-radius:10px;padding:10px 12px;outline:none;font-size:14px}
    #{{ _id }} .cb-input button{background:var(--brand);color:#fff;border:0;border-radius:10px;padding:10px 14px;font-weight:600;cursor:pointer;transition:background .2s ease,transform .1s ease}
    #{{ _id }} .cb-input button:hover{background:var(--brand-2)}
    #{{ _id }} .cb-input button:active{transform:translateY(1px)}
    #{{ _id }} .cb-hint{font-size:11px;color:#9ca3af;padding:6px 12px 10px}
    #{{ _id }} .cb-spinner{display:inline-block;width:16px;height:16px;border:2px solid #4b5563;border-top-color:#93c5fd;border-radius:50%;animation:spin 1s linear infinite}
    @keyframes spin{to{transform:rotate(360deg)}}
  </style>

  <div id="{{ _id }}" class="cb-root" data-webhook="{{ _webhook | safe }}" data-auth="{{ _authHeader | safe }}" data-open="{{ _open }}" aria-live="polite">
    <button class="cb-fab" type="button" aria-label="Abrir chat" title="Chatea con nosotros">💬</button>

    <section class="cb-panel" aria-label="Chat flotante">
      <div class="cb-header">
        <div class="cb-dot"></div>
        <div>
          <div class="cb-title">{{ _title }}</div>
          <div class="cb-sub">{{ _subtitle }}</div>
        </div>
      </div>
      <div class="cb-body">
        <div class="cb-msg bot">¡Hola! ¿En qué te ayudo hoy? 🚚</div>
      </div>
      <div class="cb-input">
        <input type="text" placeholder="Escribe tu mensaje y presiona Enter…" autocomplete="off" />
        <button class="cb-send" type="button">Enviar</button>
      </div>
      <div class="cb-hint">Este chat se conecta a n8n mediante webhook.</div>
    </section>
  </div>

  <!-- CHAT:SCRIPT -->
  <script>
  (function(){
    const root = document.getElementById('{{ _id }}');
    if (!root) return;
    const webhook = root.dataset.webhook;
    const authRaw = (root.dataset.auth || '').trim();
    const openByDefault = String(root.dataset.open).toLowerCase() === 'true';

    const $fab   = root.querySelector('.cb-fab');
    const $panel = root.querySelector('.cb-panel');
    const $body  = root.querySelector('.cb-body');
    const $send  = root.querySelector('.cb-send');
    const $input = root.querySelector('input[type="text"]');

    if (openByDefault) $panel.classList.add('open');

    const sessionKey = 'cb-session-id';
    let sessionId = localStorage.getItem(sessionKey);
    if (!sessionId) { sessionId = crypto.getRandomValues(new Uint32Array(4)).join('-'); localStorage.setItem(sessionKey, sessionId); }

    function addMsg(text, who){
      const div = document.createElement('div');
      div.className = 'cb-msg ' + (who||'bot');
      div.textContent = text;
      $body.appendChild(div); $body.scrollTop = $body.scrollHeight; return div;
    }
    function addSpinner(){
      const wrap = document.createElement('div');
      wrap.className = 'cb-msg bot';
      wrap.innerHTML = '<span class="cb-spinner" aria-label="cargando"></span> Procesando…';
      $body.appendChild(wrap); $body.scrollTop = $body.scrollHeight; return wrap;
    }
    function parseAuthHeader(raw){
      if (!raw) return {};
      // Formato sencillo: "Header-Name:Value" o varias separadas por ";"
      const out = {}; raw.split(';').forEach(pair=>{
        const i = pair.indexOf(':'); if (i>0){ out[pair.slice(0,i).trim()] = pair.slice(i+1).trim(); }
      });
      return out;
    }

    async function callWebhook(message){
      const payload = { message, sessionId, url: location.href, userAgent: navigator.userAgent, ts: new Date().toISOString() };
      const headers = Object.assign({ 'Content-Type':'application/json' }, parseAuthHeader(authRaw));
      const res = await fetch(webhook, { method:'POST', headers, mode:'cors', body: JSON.stringify(payload) });
      if (!res.ok) { throw new Error('HTTP '+res.status+' '+res.statusText); }
      const data = await res.json().catch(()=>({}));
      return data?.reply || data?.data?.reply || (Object.keys(data).length? JSON.stringify(data): 'Sin respuesta del servidor.');
    }

    async function handleSend(){
      const value = ($input.value||'').trim(); if (!value) return;
      addMsg(value,'user'); $input.value=''; $input.focus();
      const spin = addSpinner();
      try{ const reply = await callWebhook(value); spin.remove(); addMsg(String(reply||'Sin respuesta del servidor.'),'bot'); }
      catch(e){ spin.remove(); addMsg('⚠️ Error al contactar el servicio. Revisa la consola.', 'bot'); console.error('[Widget Chat]', e); }
    }

    $fab.addEventListener('click', ()=>{ $panel.classList.toggle('open'); if ($panel.classList.contains('open')) $input.focus(); });
    $send.addEventListener('click', handleSend);
    $input.addEventListener('keydown', (e)=>{ if (e.key==='Enter' && !e.shiftKey){ e.preventDefault(); handleSend(); } });

    // Exponer API mínima global con el id del root
    window.TBLChat = Object.assign(window.TBLChat||{}, {
      open: ()=> $panel.classList.add('open'),
      close:()=> $panel.classList.remove('open'),
      send: (msg)=>{ $input.value = msg; handleSend(); }
    });
  })();
  </script>
{% endmacro %}
